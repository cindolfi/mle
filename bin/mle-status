#!/usr/bin/python3
# PYTHON_ARGCOMPLETE_OK

import argparse
import warnings

import mle


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-n', '--name',
                        type=mle.utils.clean_name,
                        default=None)

    mle.utils.autocomplete(parser)
    args = parser.parse_args()

    try:
        metadata = mle.GlobalConfiguration()

        try:
            environ = mle.Environment(args.name)
        except mle.EnvironmentNotActiveError as error:
            environ = None

        print('Environments:')
        for name in metadata.existing_environment_names:
            if name == metadata.current:
                print(mle.utils.colored('   *{}'.format(name), color='blue'))
            else:
                print('    {}'.format(name))

        if environ is not None:
            models = environ.models
            print()
            print('Models ({}):'.format(environ.name))
            try:
                print(mle.utils.colored('    current = {}'.format(environ.current_model), color='blue'))
            except mle.NoCurrentModelError:
                print(mle.utils.colored('    current = None', color='blue'))
            print('    count = {}'.format(len(models)))
            print('    all = {}'.format(models))

    except (KeyboardInterrupt, BrokenPipeError):
        pass
    except Exception as error:
        return mle.error.handle(error)




if __name__ == '__main__':
    exit(main())











