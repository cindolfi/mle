#!/usr/bin/python3
# PYTHON_ARGCOMPLETE_OK
import argparse
import pathlib
import shutil

import mle
import mle.cmdline
import mle.error


def main():
    config_parser = mle.cmdline.config_file_parser(purpose='remove')
    parser = argparse.ArgumentParser(description='Remove an environment, '
                                                 'model environment, '
                                                 'or configuration file',
                                     parents=[config_parser])

    parser.add_argument('environ',
                        nargs='?',
                        type=pathlib.Path,
                        default=None,
                        help='path to the environment')

    parser.add_argument('-d', '--directory',
                        dest='delete_directory',
                        action='store_true',
                        help='delete the environment or model environment directory')

    parser.add_argument('-f', '--force',
                        dest='enforce_script',
                        action='store_false',
                        help='remove even if the on_delete script fails')

    mle.cmdline.autocomplete(parser)
    args = parser.parse_args()

    try:
        if args.config == 'local':
            if args.environ is None:
                args.environ = pathlib.Path.cwd()
            path = mle.Environment.find(args.environ)
            mle.Environment.remove(path, enforce_delete_script=args.enforce_script)
            if args.delete_directory:
                shutil.rmtree(str(path))

        elif args.config == 'global':
            path = mle.find_global_configuration(args.environ)
            path.unlink()

        elif args.config == 'system':
            path = mle.find_system_configuration()
            path.unlink()

        elif args.config == 'model':
            environ = mle.Environment(args.environ)
            environ.discard_model(args.model,
                                  delete_directory=args.delete_directory,
                                  enforce_delete_script=args.enforce_script)

        elif args.config == 'file':
            args.config_file.unlink()

    except (KeyboardInterrupt, BrokenPipeError):
        pass
    except Exception as error:
        return mle.error.handle(error)




if __name__ == '__main__':
    exit(main())

