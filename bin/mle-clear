#!/usr/bin/python3
# PYTHON_ARGCOMPLETE_OK
import argparse

import mle
import mle.cmdline
import mle.error


def main():
    parser = argparse.ArgumentParser(parents=[mle.cmdline.environment_parser()])

    group = parser.add_mutually_exclusive_group(required=True)

    group.add_argument('-a', '--all',
                       action='store_true',
                       help='remove all models')

    group.add_argument('-m', '--models',
                       nargs='*',
                       type=int,
                       help='remove a set of models')

    group.add_argument('-o', '--others',
                       action='store_true',
                       help='remove all models except the active model')

    group.add_argument('-c', '--active',
                       action='store_true',
                       help='remove the active model')

    mle.cmdline.autocomplete(parser)
    args = parser.parse_args()

    try:
        environ = mle.Environment(args.environ)

        if args.all:
            environ.discard_models(environ.models)

        elif args.others:
            others = [model for model in environ.models
                      if model != environ.active_model]
            environ.discard_models(others)
            #environ.discard_other_models(environ.active_model)

        elif args.active:
            environ.discard_model(environ.active_model)

        elif args.models:
            environ.discard_models(list(set(args.models)))

    except (KeyboardInterrupt, BrokenPipeError):
        pass
    except Exception as error:
        return mle.error.handle(error)




if __name__ == '__main__':
    exit(main())






